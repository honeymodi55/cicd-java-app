pipeline {
  agent {
    docker {
      image '273354629542.dkr.ecr.us-west-2.amazonaws.com/dockermvn:latest'
      registryUrl 'https://273354629542.dkr.ecr.us-west-2.amazonaws.com'
      registryCredentialsId 'aws-ecr-credentials'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Check Docker & Maven Versions') {
      steps {
        sh 'mvn --version'
        sh 'docker --version'
        sh 'aws --version'
      }
    }
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        // compiles the project using pom.xml and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.244.87.213:9000"  //ec2 instance's ip address
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    /*stage('Build & Push Docker Image to ECR') {
      environment {
        AWS_ACCOUNT_ID = "273354629542"
        AWS_REGION = "us-west-2"
        ECR_REPO = "java_app_image"
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh '''
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .            
            docker push ${DOCKER_IMAGE}
          '''
        }
      }
    }*/
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "honeymodi1997/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
            withCredentials([string(credentialsId: 'honeymodi1997', variable: 'dockerhubcreds')]) {
              sh """
                docker login -u honeymodi1997 -p ${dockerhubcreds}
                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .
                docker push ${DOCKER_IMAGE}
              """
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "cicd-java-app"
            GIT_USER_NAME = "honeymodi55"
        }
        steps {
            withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'github_token')]) {
                sh '''
                    git config user.email "honeymodi1997@gmail.com"
                    git config user.name "honeymodi55"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${github_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        } 
    }
  }
}
